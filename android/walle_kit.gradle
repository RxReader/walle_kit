//
//使用方法
//
//apply from: 'walle.gradle'
//
//android {
//    productFlavors {
//        prod {...}
//    }
//
//    walleConfigs {
//        prod {
//            enabled = true
//
////            // https://github.com/rxreader/walle-docker
////            jarFile = file('script/walle-cli-all-1.1.7.jar') // 默认：file('script/walle-cli-all-1.1.7.jar')
//
//            qihoo360 {
////                // https://github.com/rxreader/qihoo360-jiagu-docker
////                jiaguJarFile = file('script/jiagu/jiagu.jar') // 默认：file('script/jiagu/jiagu.jar')
//
//                account = 'xxx'
//                password = 'xxx'
//                channelId = 'qihu360'
//            }
//
//            tencent {
////                // https://github.com/rxreader/tencentcloud-legu
////                leguJarFile = file('script/legu-all.jar') // 默认：file('script/legu-all.jar')
//
//                secretId = 'xxx'
//                secretKey = 'xxx'
////                region = 'ap-guangzhou' // 可选：'ap-guangzhou'、'ap-shanghai'，默认：'ap-guangzhou'
//                channelId = 'tencent'
//            }
//
//            outputDir = file("${project.buildDir}/outputs/apk/${flavorName}/${buildType}/walle") // 默认：file("${project.buildDir}/outputs/apk/${flavorName}/${buildType}/walle")
//            fileNameFormat = '${appName}-${buildType}-${channelId}.apk' // 默认：'${appName}-${buildType}-${channelId}.apk'
////            channelType = 0 // 0：默认；1：json
//            channelFile = file('channel')
//        }
//    }
//}
//
//walle {
//    enabled = false
//}
//

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.0'
    }
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

class Qihoo360 {
    File jiaguJarFile
    String account
    String password
    String channelId

    void validate(String variant) {
        if (account == null || account.empty) {
            throw new RuntimeException("Qihoo360 account is empty for variant '$variant'")
        }
        if (password == null || password.empty) {
            throw new RuntimeException("Qihoo360 password is empty for variant '$variant'")
        }
        if (channelId == null || channelId.empty) {
            throw new RuntimeException("Qihoo360 channelId is empty for variant '$variant'")
        }
    }
}

class Tencent {
    File leguJarFile
    String secretId
    String secretKey
    String region
    String channelId

    void validate(String variant) {
        if (secretId == null || secretId.empty) {
            throw new RuntimeException("Tencent secretId is empty for variant '$variant'")
        }
        if (secretKey == null || secretKey.empty) {
            throw new RuntimeException("Tencent secretKey is empty for variant '$variant'")
        }
        if (channelId == null || channelId.empty) {
            throw new RuntimeException("Tencent channelId is empty for variant '$variant'")
        }
    }
}

class Walle {
    final String name
    Boolean enabled
    File jarFile
    Qihoo360 qihoo360
    Tencent tencent
    File outputDir
    String fileNameFormat
    Integer channelType
    File channelFile

    Walle(String name = 'default') {
        this.name = name
    }

    void qihoo360(Closure closure){
        qihoo360 = new Qihoo360()
        closure.delegate = qihoo360
        closure()
    }

    void tencent(Closure closure){
        tencent = new Tencent()
        closure.delegate = tencent
        closure()
    }

    // ---

    void validate() {
        if (enabled == null || !enabled.booleanValue()) {
            return
        }
        qihoo360?.validate(name)
        tencent?.validate(name)
        if (channelType != null && channelType != 0 && channelType != 1) {
            throw new RuntimeException("walle channel type is unsupported for variant '$name'")
        }
        if (channelFile == null) {
            throw new RuntimeException("walle channel file is null for variant '$name'")
        }
    }

    Walle mergeWith(Walle other) {
        if (other == null) {
            return this
        }
        Walle mergeWalle = new Walle(name == 'default' ? other.name : (other.name == 'default' ? name : "$name${other.name.capitalize()}"))
        mergeWalle.enabled = other.enabled != null ? other.enabled : enabled
        mergeWalle.jarFile = other.jarFile ?: jarFile
        mergeWalle.qihoo360 = other.qihoo360 ?: qihoo360
        mergeWalle.tencent = other.tencent ?: tencent
        mergeWalle.outputDir = other.outputDir ?: outputDir
        mergeWalle.fileNameFormat = other.fileNameFormat ?: fileNameFormat
        mergeWalle.channelType = other.channelType ?: channelType
        mergeWalle.channelFile = other.channelFile ?: channelFile
        return mergeWalle
    }
}

apply plugin: WallePlugin

class WallePlugin implements Plugin<Project> {

    @Override
    void apply(Project target) {
        target.extensions.create('walle', Walle.class)
        target.plugins.withId('com.android.application') {
            Walle baseWalle = target.walle
            def walleConfigs = target.container(Walle.class)
            target.android.extensions.walleConfigs = walleConfigs
            target.android.applicationVariants.whenObjectAdded { variant ->
                Walle mergeWalle = null
                List<Walle> flavorWalles = variant.productFlavors?.stream()?.map{flavor -> walleConfigs.findByName(flavor.name)}?.collect()?.toList() ?: Collections.emptyList()
                Walle buildTypeWalle = walleConfigs.findByName(variant.buildType.name)
                if (buildTypeWalle == null && (variant.buildType.name == 'debug' || variant.buildType.name == 'profile')) {
                    buildTypeWalle = new Walle(variant.buildType.name)
                    buildTypeWalle.enabled = false
                }
                // buildType > flavor > base
                List<Walle> walles = []
                walles.add(baseWalle)
                walles.addAll(flavorWalles)
                walles.add(buildTypeWalle)
                for (Walle walle in walles) {
                    if (mergeWalle == null) {
                        mergeWalle = walle
                    } else {
                        mergeWalle = mergeWalle.mergeWith(walle)
                    }
                }

                mergeWalle?.validate()

                variant.assemble.doLast {
                    if (mergeWalle == null || mergeWalle.enabled == null || !mergeWalle.enabled.booleanValue()) {
                        target.logger.info("Gradle Walle is disabled for variant '${variant.name}'.")
                        return
                    }

                    if (!variant.signingReady && !variant.outputsAreSigned) {
                        target.logger.error("Signing not ready for Gradle Walle. Be sure to specify a signingConfig for variant '${variant.name}'.")
                        return
                    }

                    if (!org.gradle.internal.os.OperatingSystem.current().isMacOsX() && !org.gradle.internal.os.OperatingSystem.current().isLinux() && !org.gradle.internal.os.OperatingSystem.current().isWindows()) {
                        target.logger.info("Gradle Walle 仅能运行于 MacOS/Linux/Windows，不能运行于 ${org.gradle.internal.os.OperatingSystem.current().osName}。")
                        return
                    }

                    println '--- walle ---'

                    File apkFile = variant.outputs.first().outputFile as File
                    println "apk file: ${apkFile.path}"

                    boolean v2SigningEnabled = v2SigningEnabled(variant)
                    println "v2SigningEnabled: ${v2SigningEnabled}"
                    if (!v2SigningEnabled) {
                        throw new RuntimeException("${apkFile.path} has no v2 signature in Apk Signing Block!")
                    }

                    // 预备输出目录
                    File outputDir = mergeWalle.outputDir
                    if (outputDir == null) {
                        outputDir = new File(apkFile.parentFile, 'walle')
                    }
                    File channelsDir = new File(outputDir, 'channels')
                    if (!channelsDir.exists()) {
                        channelsDir.mkdirs()
                    }

                    def nameVariantMap = [
                            'appName'    : target.name,
                            'projectName': target.rootProject.name,
                            'buildType'  : variant.buildType.name,
                            'versionName': variant.versionName,
                            'versionCode': variant.versionCode,
                            'packageName': variant.applicationId,
                            'flavorName' : variant.flavorName,
                            'channelId': 'channel'
                    ]

                    String fileNameFormat = mergeWalle.fileNameFormat ?: '${appName}-${buildType}-${channelId}.apk'

                    // 读取渠道信息
                    def channels = []
                    if (mergeWalle.channelType == 1) {
                        def slurper = new groovy.json.JsonSlurper()
                        channels = slurper.parse(mergeWalle.channelFile)
                    } else {
                        mergeWalle.channelFile.eachLine { line ->
                            String lineTrim = line.trim()
                            if (lineTrim.length() != 0 && !lineTrim.startsWith("#")) {
                                def channelId = line.split("#").first().trim()
                                if (channelId.length() != 0) {
                                    channels.add(['alias': channelId, 'channelId': channelId])
                                }
                            }
                        }
                    }

                    channels.each { channel ->
                        nameVariantMap['channelId'] = channel.channelId
                        File storeDir = channelsDir
                        if (channel.storeDir != null) {
                            storeDir = new File(storeDir, channel.storeDir)
                            if (!storeDir.exists()) {
                                storeDir.mkdirs()
                            }
                        }
                        File channelApkFile = new File(storeDir, new groovy.text.SimpleTemplateEngine().createTemplate(fileNameFormat).make(nameVariantMap).toString())

                        if (channel.channelId == mergeWalle.qihoo360?.channelId) {
                            apkFile = qihoo360JiaguApk(target, variant, mergeWalle, apkFile, outputDir)
                        } else if (channel.channelId == mergeWalle.tencent?.channelId) {
                            apkFile = tencentLeguApk(target, variant, mergeWalle, apkFile, outputDir)
                        }
                        walleApk(target, mergeWalle, channel, apkFile, channelApkFile)
                    }

                    println '--- walle ---'
                }
            }
        }
        target.afterEvaluate {
            if (!target.plugins.hasPlugin('com.android.application')) {
                target.logger.warn("The Android Gradle Plugin was not applied. Gradle Walle will not be configured.")
            }
        }
    }

    boolean v2SigningEnabled(variant) {
        def signingConfig = variant.signingConfig
        return signingConfig.v2SigningEnabled
    }

    File qihoo360JiaguApk(Project target, def variant, Walle walle, File apkFile, File outputDir) {
        File jarFile = walle.qihoo360.jiaguJarFile
        if (jarFile == null) {
            jarFile = target.file('script/jiagu/jiagu.jar')
        }
        if (!jarFile.exists()) {
            jarFile.parentFile.parentFile.mkdirs()
            File jiaguZipFile = null
            String downloadUrl = null
            if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
                jiaguZipFile = new File(jarFile.parentFile.parentFile, 'qihoo360-jiagu-mac.zip')
                downloadUrl = 'https://down.360safe.com/360Jiagu/360jiagubao_mac.zip'
            } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
                jiaguZipFile = new File(jarFile.parentFile.parentFile, 'qihoo360-jiagu-linux-64.zip')
                downloadUrl = 'https://down.360safe.com/360Jiagu/360jiagubao_linux_64.zip'
            } else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
                jiaguZipFile = new File(jarFile.parentFile.parentFile, 'qihoo360-jiagu-windows-32.zip')
                downloadUrl = 'https://down.360safe.com/360Jiagu/360jiagubao_windows_32.zip'
            }
            download(downloadUrl, jiaguZipFile)
            unzip(jiaguZipFile, jiaguZipFile.parentFile)
        }
        if (!jarFile.exists()) {
            throw new RuntimeException("下载 ${jarFile.parentFile.parentFile.toPath().relativize(jarFile.toPath()).toString().replace("\\", "/")} 失败")
        }
        File jiaguDir = new File(outputDir, 'jiagu')
        jiaguDir.mkdirs()
        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            target.exec {
                commandLine 'bash', '-lc', "java -jar ${jarFile.path} -login ${walle.qihoo360.account} ${walle.qihoo360.password}"
            }
            target.exec {
                commandLine 'bash', '-lc', "java -jar ${jarFile.path} -jiagu ${apkFile.path} ${jiaguDir.path}"
            }
        } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            target.exec {
                commandLine 'bash', '-lc', "${jarFile.parentFile.path}/java/bin/java -jar ${jarFile.path} -login ${walle.qihoo360.account} ${walle.qihoo360.password}"
            }
            target.exec {
                commandLine 'bash', '-lc', "${jarFile.parentFile.path}/java/bin/java -jar ${jarFile.path} -jiagu ${apkFile.path} ${jiaguDir.path}"
            }
        } else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            target.exec {
                commandLine 'cmd', '/c', "${jarFile.parentFile.path}\\java\\bin\\java -jar ${jarFile.path} -login ${walle.qihoo360.account} ${walle.qihoo360.password}"
            }
            target.exec {
                commandLine 'cmd', '/c', "${jarFile.parentFile.path}\\java\\bin\\java -jar ${jarFile.path} -jiagu ${apkFile.path} ${jiaguDir.path}"
            }
        }
        File jiaguApk = jiaguDir.listFiles(new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith('.apk')
            }
        }).first()
        File jiaguSignedApk = new File(jiaguDir.path, apkFile.name.replace('.apk', '_jiagu_signed.apk'))
        signApk(target, variant, jiaguApk, jiaguSignedApk)
        return jiaguSignedApk
    }

    File tencentLeguApk(Project target, def variant, Walle walle, File apkFile, File outputDir) {
        File jarFile = walle.tencent.leguJarFile
        if (jarFile == null) {
            jarFile = target.file('script/legu-all.jar')
        }
        if (!jarFile.exists()) {
            jarFile.parentFile.mkdirs()
            def downloadUrl = 'https://github.com/rxreader/tencentcloud-legu/releases/download/3.0.60/legu-all.jar'
            download(downloadUrl, jarFile)
        }
        if (!jarFile.exists()) {
            throw new RuntimeException("下载 ${jarFile.name} 失败")
        }
        File leguDir = new File(outputDir, 'legu')
        leguDir.mkdirs()
        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX() || org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            target.exec {
                commandLine 'bash', '-lc', "java -jar ${jarFile.path} configure " +
                        "-secretId ${walle.tencent.secretId} " +
                        "-secretKey ${walle.tencent.secretKey} " +
                        "-region ${walle.tencent.region ?: 'ap-guangzhou'}"
            }
            target.exec {
                commandLine 'bash', '-lc', "java -jar ${jarFile.path} legu " +
                        "-in ${apkFile.path} " +
                        "-out ${leguDir.path}"
            }
        } else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            target.exec {
                commandLine 'cmd', '/c', "java -jar ${jarFile.path} configure " +
                        "-secretId ${walle.tencent.secretId} " +
                        "-secretKey ${walle.tencent.secretKey} " +
                        "-region ${walle.tencent.region ?: 'ap-guangzhou'}"
            }
            target.exec {
                commandLine 'cmd', '/c', "java -jar ${jarFile.path} legu " +
                        "-in ${apkFile.path} " +
                        "-out ${leguDir.path}"
            }
        }
        File leguApk = leguDir.listFiles(new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith('.apk')
            }
        }).first()
        File leguSignedApk = new File(leguDir.path, apkFile.name.replace('.apk', '_legu_signed.apk'))
        signApk(target, variant, leguApk, leguSignedApk)
        return leguSignedApk
    }

    void signApk(Project target, def variant, File apkFile, File signedApkFile) {
        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX() || org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            target.exec {
                commandLine 'bash', '-lc', "${target.android.sdkDirectory.path}/build-tools/${target.android.buildToolsVersion}/apksigner sign " +
                        "-ks ${variant.signingConfig.storeFile.path} " +
                        "-ks-pass pass:${variant.signingConfig.storePassword} " +
                        "-ks-key-alias ${variant.signingConfig.keyAlias} " +
                        "--key-pass pass:${variant.signingConfig.keyPassword} " +
                        "--out ${signedApkFile.path} ${apkFile.path}"
            }
        } else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            exec {
                commandLine 'cmd', '/c', "${target.android.sdkDirectory.path}\\build-tools\\${target.android.buildToolsVersion}\\apksigner sign " +
                        "-ks ${variant.signingConfig.storeFile.path} " +
                        "-ks-pass pass:${variant.signingConfig.storePassword} " +
                        "-ks-key-alias ${variant.signingConfig.keyAlias} " +
                        "--key-pass pass:${variant.signingConfig.keyPassword} " +
                        "--out ${signedApkFile.path} ${apkFile.path}"
            }
        }
    }

    void walleApk(Project target, Walle walle, def channel, File apkFile, File channelApkFile) {
        File jarFile = walle.jarFile
        if (jarFile == null) {
            jarFile = target.file('script/walle-cli-all-1.1.7.jar')
        }
        if (!jarFile.exists()) {
            jarFile.parentFile.mkdirs()
            String downloadUrl = 'https://github.com/rxreader/walle/releases/download/v1.1.7/walle-cli-all-1.1.7.jar'
            download(downloadUrl, jarFile)
        }
        if (!jarFile.exists()) {
            throw new RuntimeException("下载 ${jarFile.name} 失败")
        }
        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX() || org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            target.exec {
                commandLine 'bash', '-lc', "java -jar ${jarFile.path} put -c ${channel.channelId} ${apkFile.path} ${channelApkFile.path}"
            }
        } else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            target.exec {
                commandLine 'cmd', '/c', "java -jar ${jarFile.path} put -c ${channel.channelId} ${apkFile.path} ${channelApkFile.path}"
            }
        }
    }

    // ---
    void download(String url, File file) {
        file.withOutputStream { it << new URL(url).newInputStream() }
    }

    void unzip(File zipFile, File unzipDir) {
        def zip = new java.util.zip.ZipFile(zipFile)
        zip.entries().each{
            if (!it.isDirectory() && it.size > 0){
                def child = new File(unzipDir, it.name)
                child.parentFile.mkdirs()
                def zis = zip.getInputStream(it)
                def fos = new FileOutputStream(child)
                def buf = new byte[4 * 1024]
                def len
                while ((len = zis.read(buf)) != -1) {
                    fos.write(buf, 0, len)
                }
                fos.close()
            }
        }
        zip.close()
    }
}
