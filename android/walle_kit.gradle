//
//使用方法
//
//apply from: 'walle.gradle'
//
//android {
//    productFlavors {
//        prod {...}
//    }
//
//    walleConfigs {
//        prod {
//            enabled = true
//
////            // https://github.com/rxreader/walle-docker
////            jarFile = file('script/walle-cli-all-1.1.7.jar') // 默认：file('script/walle-cli-all-1.1.7.jar')
//
//            qihoo360 {
////                // https://github.com/rxreader/qihoo360-jiagu-docker
////                jiaguJarFile = file('script/jiagu/jiagu.jar') // 默认：file('script/jiagu/jiagu.jar')
//
//                account = 'xxx'
//                password = 'xxx'
//                channelId = 'qihu360'
//            }
//
//            tencent {
////                // https://github.com/rxreader/tencentcloud-legu
////                leguJarFile = file('script/legu-all.jar') // 默认：file('script/legu-all.jar')
//
//                secretId = 'xxx'
//                secretKey = 'xxx'
////                region = 'ap-guangzhou' // 可选：'ap-guangzhou'、'ap-shanghai'，默认：'ap-guangzhou'
//                channelId = 'tencent'
//            }
//
//            outputDir = file("${project.buildDir}/outputs/apk/${flavorName}/${buildType}/walle") // 默认：file("${project.buildDir}/outputs/apk/${flavorName}/${buildType}/walle")
//            fileNameFormat = '${appName}-${buildType}-${channelId}.apk' // 默认：'${appName}-${buildType}-${channelId}.apk'
////            channelType = 0 // 0：默认；1：json
//            channelFile = file('channel')
//        }
//    }
//}
//
//walle {
//    enabled = false
//}
//

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.2'
    }
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

class Qihoo360 {
    File jiaguJarFile
    String account
    String password
    String channelId

    void validate(String variant) {
        if (account == null || account.empty) {
            throw new IllegalStateException("Qihoo360 account is empty for variant '$variant'")
        }
        if (password == null || password.empty) {
            throw new IllegalStateException("Qihoo360 password is empty for variant '$variant'")
        }
        if (channelId == null || channelId.empty) {
            throw new IllegalStateException("Qihoo360 channelId is empty for variant '$variant'")
        }
    }
}

class Tencent {
    File leguJarFile
    String secretId
    String secretKey
    String region
    String channelId

    void validate(String variant) {
        if (secretId == null || secretId.empty) {
            throw new IllegalStateException("Tencent secretId is empty for variant '$variant'")
        }
        if (secretKey == null || secretKey.empty) {
            throw new IllegalStateException("Tencent secretKey is empty for variant '$variant'")
        }
        if (channelId == null || channelId.empty) {
            throw new IllegalStateException("Tencent channelId is empty for variant '$variant'")
        }
    }
}

class Walle {
    final String name
    Boolean enabled
    File jarFile
    Qihoo360 qihoo360
    Tencent tencent
    File outputDir
    String fileNameFormat
    Integer channelType
    File channelFile

    Walle(String name = 'default') {
        this.name = name
    }

    void qihoo360(Closure closure){
        qihoo360 = new Qihoo360()
        closure.delegate = qihoo360
        closure()
    }

    void tencent(Closure closure){
        tencent = new Tencent()
        closure.delegate = tencent
        closure()
    }

    // ---

    void validate() {
        if (enabled == null || !enabled.booleanValue()) {
            return
        }
        qihoo360?.validate(name)
        tencent?.validate(name)
        if (channelType != null && channelType != 0 && channelType != 1) {
            throw new IllegalStateException("walle channel type is unsupported for variant '$name'")
        }
        if (channelFile == null) {
            throw new IllegalStateException("walle channel file is null for variant '$name'")
        }
    }

    Walle mergeWith(Walle other) {
        if (other == null) {
            return this
        }
        def mergeWalle = new Walle(name == 'default' ? other.name : (other.name == 'default' ? name : "$name${other.name.capitalize()}"))
        mergeWalle.enabled = other.enabled != null ? other.enabled : enabled
        mergeWalle.jarFile = other.jarFile ?: jarFile
        mergeWalle.qihoo360 = other.qihoo360 ?: qihoo360
        mergeWalle.tencent = other.tencent ?: tencent
        mergeWalle.outputDir = other.outputDir ?: outputDir
        mergeWalle.fileNameFormat = other.fileNameFormat ?: fileNameFormat
        mergeWalle.channelType = other.channelType ?: channelType
        mergeWalle.channelFile = other.channelFile ?: channelFile
        return mergeWalle
    }
}

apply plugin: WallePlugin

class WallePlugin implements Plugin<Project> {

    @Override
    void apply(Project target) {
        target.extensions.create('walle', Walle.class)
        target.plugins.withId('com.android.application') {
            def baseWalle = target.walle
            def walleConfigs = target.container(Walle.class)
            target.android.extensions.walleConfigs = walleConfigs
            target.android.applicationVariants.whenObjectAdded { variant ->
                Walle mergeWalle = null
                def flavorWalles = variant.productFlavors?.stream()?.map{flavor -> walleConfigs.findByName(flavor.name)}?.collect()?.toList() ?: Collections.emptyList()
                def buildTypeWalle = walleConfigs.findByName(variant.buildType.name)
                if (buildTypeWalle == null && (variant.buildType.name == 'debug' || variant.buildType.name == 'profile')) {
                    buildTypeWalle = new Walle(variant.buildType.name)
                    buildTypeWalle.enabled = false
                }
                // buildType > flavor > base
                def walles = []
                walles.add(baseWalle)
                walles.addAll(flavorWalles)
                walles.add(buildTypeWalle)
                for (def walle in walles) {
                    if (mergeWalle == null) {
                        mergeWalle = walle
                    } else {
                        mergeWalle = mergeWalle.mergeWith(walle)
                    }
                }

                mergeWalle?.validate()

                variant.assemble.doLast {
                    if (mergeWalle == null || mergeWalle.enabled == null || !mergeWalle.enabled.booleanValue()) {
                        target.logger.info("Gradle Walle is disabled for variant '${variant.name}'.")
                        return
                    }

                    if (!variant.signingReady && !variant.outputsAreSigned) {
                        target.logger.error("Signing not ready for Gradle Walle. Be sure to specify a signingConfig for variant '${variant.name}'.")
                        return
                    }

                    if (!org.gradle.internal.os.OperatingSystem.current().isMacOsX() && !org.gradle.internal.os.OperatingSystem.current().isLinux()) {
                        target.logger.info("Gradle Walle 仅能运行于 MacOS 或 Linux，不能运行于 ${org.gradle.internal.os.OperatingSystem.current().osName}。")
                        return
                    }

                    System.out.println('--- walle ---')

                    File apkFile = variant.outputs.first().outputFile as File
                    System.out.println("apk file: ${apkFile.path}")

                    def v2SigningEnabled = v2SigningEnabled(variant)
                    System.out.println("v2SigningEnabled: ${v2SigningEnabled}")
                    if (!v2SigningEnabled) {
                        throw new IllegalStateException("${apkFile.path} has no v2 signature in Apk Signing Block!")
                    }

                    // 预备输出目录
                    def outputDir = mergeWalle.outputDir
                    if (outputDir == null) {
                        outputDir = new File(apkFile.parentFile, 'walle')
                    }
                    def channelsDir = new File(outputDir, 'channels')
                    if (!channelsDir.exists()) {
                        channelsDir.mkdirs()
                    }

                    def nameVariantMap = [
                            'appName'    : target.name,
                            'projectName': target.rootProject.name,
                            'buildType'  : variant.buildType.name,
                            'versionName': variant.versionName,
                            'versionCode': variant.versionCode,
                            'packageName': variant.applicationId,
                            'flavorName' : variant.flavorName,
                            'channelId': 'channel'
                    ]

                    String fileNameFormat = mergeWalle.fileNameFormat ?: '${appName}-${buildType}-${channelId}.apk'
                    def targetApkFile = new File(outputDir, new groovy.text.SimpleTemplateEngine().createTemplate(fileNameFormat).make(nameVariantMap).toString())// new File(outputDir, apkFile.name)

                    // 复制
                    target.exec {
                        commandLine 'bash', '-lc', "cp ${apkFile.path} ${targetApkFile.path}"
                    }

                    System.out.println("target apk file: ${targetApkFile.path}")

                    // 读取渠道信息
                    def channels = []
                    if (mergeWalle.channelType == 1) {
                        def slurper = new groovy.json.JsonSlurper()
                        channels = slurper.parse(mergeWalle.channelFile)
                    } else {
                        mergeWalle.channelFile.eachLine { line ->
                            def lineTrim = line.trim()
                            if (lineTrim.length() != 0 && !lineTrim.startsWith("#")) {
                                def channelId = line.split("#").first().trim()
                                if (channelId.length() != 0) {
//                                    System.out.println("channel: ${channelId}")
                                    channels.add(['alias': channelId, 'channelId': channelId])
                                }
                            }
                        }
                    }

//                    System.out.println("channelIds: ${channelIds}")
                    channels.each { channel ->
                        nameVariantMap['channelId'] = channel.channelId
                        File storeDir = channelsDir
                        if (channel.storeDir != null) {
                            storeDir = new File(storeDir, channel.storeDir)
                            if (!storeDir.exists()) {
                                storeDir.mkdirs()
                            }
                        }
                        def channelApkFile = new File(storeDir, new groovy.text.SimpleTemplateEngine().createTemplate(fileNameFormat).make(nameVariantMap).toString())

                        def originalApkFile
                        if (channel.channelId == mergeWalle.qihoo360?.channelId) {
                            // 360加固
                            System.out.println("--> jiagu")
                            File jiaguJarFile = mergeWalle.qihoo360.jiaguJarFile
                            if (jiaguJarFile == null) {
                                jiaguJarFile = target.file('script/jiagu/jiagu.jar')
                            }
                            if (!jiaguJarFile.exists()) {
                                jiaguJarFile.parentFile.parentFile.mkdirs()
                                System.out.println('download jiagu/jiagu.jar')
                                if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
                                    File jiaguZipFile = target.file('script/qihoo360-jiagu.zip')
                                    if (!jiaguZipFile.exists()) {
                                        def downloadUrl = 'https://down.360safe.com/360Jiagu/360jiagubao_mac.zip'
                                        target.exec {
                                            commandLine 'bash', '-lc', "curl -o ${jiaguZipFile.path} $downloadUrl"
                                        }
                                    }
                                    target.exec {
                                        commandLine 'bash', '-lc', "unzip -o ${jiaguZipFile.path} 'jiagu/*' -d ${jiaguJarFile.parentFile.parentFile.path}"
                                    }
                                } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
                                    File jiaguZipFile = target.file('script/qihoo360-jiagu.zip')
                                    if (!jiaguZipFile.exists()) {
                                        def downloadUrl = 'https://down.360safe.com/360Jiagu/360jiagubao_linux_64.zip'
                                        target.exec {
                                            commandLine 'bash', '-lc', "wget -O ${jiaguZipFile.path} $downloadUrl"
                                        }
                                    }
                                    target.exec {
                                        commandLine 'bash', '-lc', "unzip -o ${jiaguZipFile.path} -d ${jiaguJarFile.parentFile.parentFile.path}"
                                    }
                                }
                                if (!jiaguJarFile.exists()) {
                                    throw new IllegalStateException('下载 jiagu/jiagu.jar 失败')
                                }
                            }
                            File jiaguDir = new File(outputDir, 'jiagu')
                            jiaguDir.mkdirs()
                            if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
                                target.exec {
                                    commandLine 'bash', '-lc', "java -jar ${jiaguJarFile.path} -login ${mergeWalle.qihoo360.account} ${mergeWalle.qihoo360.password}"
                                }
                                target.exec {
                                    commandLine 'bash', '-lc', "java -jar ${jiaguJarFile.path} -jiagu ${targetApkFile.path} ${jiaguDir.path}"
                                }
                            } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
                                target.exec {
                                    commandLine 'bash', '-lc', "${jiaguJarFile.parentFile.path}/java/bin/java -jar ${jiaguJarFile.path} -login ${mergeWalle.qihoo360.account} ${mergeWalle.qihoo360.password}"
                                }
                                target.exec {
                                    commandLine 'bash', '-lc', "${jiaguJarFile.parentFile.path}/java/bin/java -jar ${jiaguJarFile.path} -jiagu ${targetApkFile.path} ${jiaguDir.path}"
                                }
                            }
                            File jiaguApk = jiaguDir.listFiles(new FilenameFilter() {
                                @Override
                                boolean accept(File dir, String name) {
                                    return name.toLowerCase().endsWith('.apk')
                                }
                            }).first()
                            File jiaguApkSigned = new File(jiaguDir.path, targetApkFile.name.replace('.apk', '_jiagu_signed.apk'))
                            System.out.println("sign jiagu apk: ${jiaguApk.path}")
                            signApk(target, variant, target.android.buildToolsVersion, jiaguApk, jiaguApkSigned)
                            System.out.println("<-- jiagu")

                            originalApkFile = jiaguApkSigned
                        } else if (channel.channelId == mergeWalle.tencent?.channelId) {
                            // 腾讯乐固
                            System.out.println("--> legu")
                            File leguJarFile = mergeWalle.tencent.leguJarFile
                            if (leguJarFile == null) {
                                leguJarFile = target.file('script/legu-all.jar')
                            }
                            if (!leguJarFile.exists()) {
                                leguJarFile.parentFile.mkdirs()
                                System.out.println('download legu-all.jar')
                                def downloadUrl = 'https://github.com/rxreader/tencentcloud-legu/releases/download/3.0.60/legu-all.jar'
                                if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
                                    target.exec {
                                        commandLine 'bash', '-lc', "curl -iL --max-redirs 5 -o ${leguJarFile.path} $downloadUrl"
                                    }
                                } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
                                    target.exec {
                                        commandLine 'bash', '-lc', "wget -O ${leguJarFile.path} $downloadUrl"
                                    }
                                }
                                if (!leguJarFile.exists()) {
                                    throw new IllegalStateException('下载 legu-all.jar 失败')
                                }
                            }
                            File leguDir = new File(outputDir, 'legu')
                            leguDir.mkdirs()
                            target.exec {
                                commandLine 'bash', '-lc', "java -jar ${leguJarFile.path} configure " +
                                        "-secretId ${mergeWalle.tencent.secretId} " +
                                        "-secretKey ${mergeWalle.tencent.secretKey} " +
                                        "-region ${mergeWalle.tencent.region ?: 'ap-guangzhou'}"
                            }
                            target.exec {
                                commandLine 'bash', '-lc', "java -jar ${leguJarFile.path} legu " +
                                        "-in ${targetApkFile.path} " +
                                        "-out ${leguDir.path}"
                            }
                            File leguApk = leguDir.listFiles(new FilenameFilter() {
                                @Override
                                boolean accept(File dir, String name) {
                                    return name.toLowerCase().endsWith('.apk')
                                }
                            }).first()
                            File leguApkSigned = new File(leguDir.path, targetApkFile.name.replace('.apk', '_legu_signed.apk'))
                            System.out.println("sign legu apk: ${leguApk.path}")
                            signApk(target, variant, target.android.buildToolsVersion, leguApk, leguApkSigned)
                            System.out.println("<-- legu")

                            originalApkFile = leguApkSigned
                        } else {
                            originalApkFile = targetApkFile
                        }

                        // walle 写渠道
                        def jarFile = mergeWalle.jarFile
                        if (jarFile == null) {
                            jarFile = target.file('script/walle-cli-all-1.1.7.jar')
                        }
                        if (!jarFile.exists()) {
                            jarFile.parentFile.mkdirs()
                            System.out.println('download walle-1.1.7.zip')
                            def downloadUrl = 'https://codeload.github.com/Meituan-Dianping/walle/zip/v1.1.7'
                            def walleZipFile = new File(jarFile.parentFile, "walle-1.1.7.zip")
                            if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
                                target.exec {
                                    commandLine 'bash', '-lc', "curl -iL --max-redirs 5 -o ${walleZipFile.path} $downloadUrl"
                                }
                            } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
                                target.exec {
                                    commandLine 'bash', '-lc', "wget -O ${walleZipFile.path} $downloadUrl"
                                }
                            }
                            if (!walleZipFile.exists()) {
                                throw new IllegalStateException('下载 walle-1.1.7.zip 失败')
                            }
                            // 解压
                            target.exec {
                                commandLine 'bash', '-lc', "unzip -o ${walleZipFile.path} -d ${walleZipFile.parentFile.path}\n" +
                                        "rm ${walleZipFile.path}"
                            }
                            def walleUnzipDir = new File(walleZipFile.parentFile, 'walle-1.1.7')
                            // 编译
                            target.exec {
                                commandLine 'bash', '-lc', "cd ${walleUnzipDir.path}\n" +
                                        "./gradlew :walle-cli:clean :walle-cli:shadowJar\n" +
                                        "cp walle-cli/build/libs/walle-cli-all.jar ${jarFile.path}\n" +
                                        "rm -rf ${walleUnzipDir.path}\n"
                            }
                            if (!jarFile.exists()) {
                                throw new IllegalStateException("${jarFile.name} 编译失败")
                            }
                        }
                        if (!mergeWalle.channelFile.exists()) {
                            throw new IllegalStateException('walle channel file 不存在')
                        }
                        target.exec {
                            commandLine 'bash', '-lc', "java -jar ${jarFile.path} put -c ${channel.channelId} ${originalApkFile.path} ${channelApkFile.path}"
                        }
                    }

                    // webhook

                    System.out.println('--- walle ---')
                }
            }
        }
        target.afterEvaluate {
            if (!target.plugins.hasPlugin('com.android.application')) {
                target.logger.warn("The Android Gradle Plugin was not applied. Gradle Walle will not be configured.")
            }
        }
    }

    boolean v2SigningEnabled(variant) {
        def signingConfig = variant.signingConfig
        return signingConfig.v2SigningEnabled
    }

    void signApk(Project target, variant, String buildToolsVersion, File apkFile, File targetApkFile) {
        target.exec {
            commandLine 'bash', '-lc', "${target.android.sdkDirectory.path}/build-tools/${buildToolsVersion}/apksigner sign " +
                    "-ks ${variant.signingConfig.storeFile.path} " +
                    "-ks-pass pass:${variant.signingConfig.storePassword} " +
                    "-ks-key-alias ${variant.signingConfig.keyAlias} " +
                    "--key-pass pass:${variant.signingConfig.keyPassword} " +
                    "--out ${targetApkFile.path} ${apkFile.path}"
        }
    }
}
